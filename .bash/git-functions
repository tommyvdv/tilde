#!/bin/bash

#
# The whitespace rules used in "git apply --whitespace" and "git diff" gained a
# new member in the family (tab-in-indent) to help projects with policy to
# indent only with spaces.
#
# It is controlled and used in the same ways as the other whitespace checking
# options.
#
# The highlighting in git diff is the same as the other whitespace errors.
# Checking is available with git diff --check.
# Et cetera.
# Add tab-in-indent to the value of the core.whitespace configuration variable
# to enable it (probably either in one or more specific repositories or in
# your “global” (per-use) configuration).
#
# Thank to Chris Johnsen
#

# set-show-tabs() {
#     global=
#     test "$1" = -g || test "$1" = --global && global=--global
#     cws=$(git config $global core.whitespace)
#     case "$cws" in
#         tab-in-indent,*|*,tab-in-indent|*,tab-in-indent,*) ;;
#         *) git config $global core.whitespace "$cws"${cws:+,}tab-in-indent ;;
#     esac
# }
# set-show-tabs           # only in local repository
# set-show-tabs --global  # for all your Git activities
# or just edit it manually with "git config [--global] --edit"
# Or, you can set it for individual commands (git -c is also from 1.7.2):
# git -c core.whitespace=tab-in-indent diff --check
# ------------------------------------------------------------------------------

#
# Bash git functions
# self-written, copied, adapted...
# If not written myself, I probably took/stole/adapted it from
# Gary Bernhardt, Jan Moesen, Dave Lens, or some other dude(tte) on the web.
#

#
# switch case-mode
#
_switch() {
    echo "$BLUE switch case-sensitive mode $NORMAL"
    mv ~/_Projects temp_Projects
    mv ~/Projects _Projects
    mv ~/temp_Projects Projects
}

#
# copy module
#
copymodule() {
    MODULE="$3"

    FROMBACKEND="~/Projects/$1/src/Backend/Modules/$MODULE"
    TOBACKEND="~/Projects/$2/src/Backend/Modules/$MODULE"

    FROMFRONTEND="~/Projects/$1/src/Frontend/Modules/$MODULE"
    TOFRONTEND="~/Projects/$2/src/Frontend/Modules/$MODULE"

    echo "$BLUE copy -r $FROMBACKEND $TOBACKEND $NORMAL"
    copy -r $FROMBACKEND $TOBACKEND

    echo "$BLUE copy -r $FROMFRONTEND $TOFRONTEND $NORMAL"
    copy -r $FROMFRONTEND $TOFRONTEND
}

#
# create www dir
#
lnwww() {
    FROM="$(realpath .)"
    DIRECTORY=$1
    TO="www"
    echo "$BLUE ln -s $FROM/$DIRECTORY $TO $NORMAL"
    ln -s $FROM/$DIRECTORY $TO
}

#
# copy ssh public key to clipboard
#
cpssh() {
    echo "$BLUE pbcopy < ~/.ssh/id_rsa.pub $NORMAL"
    pbcopy < ~/.ssh/id_rsa.pub
}

#
# git commit -F commit.txt
#
__DEPRECATED__gc() {
    FILE="commit"
    VARIABLE=${1-$FILE}
    echo "$BLUE git commit -F $VARIABLE $NORMAL"

    # if file exists
    if [ ! -f $VARIABLE ]; then
        echo "$RED File not found! $NORMAL"
        git commit
    else
        git commit -F $VARIABLE
        git log -1
    fi
}

#
# git commit -F commit.txt
#
greset() {
    echo "$BLUE git reset --soft HEAD~1 $NORMAL"
    git reset --soft HEAD~1
}

#
# git commit -F commit.txt
#
gresethard() {
    echo "$BLUE git reset HEAD --hard $NORMAL"
    git reset HEAD --hard

}

#
# git commit -F commit.txt
#
# gl() {
#     DEFAULT=3
#     AMOUNT=${1-$DEFAULT}
#     echo "$BLUE g log --pretty=oneline -$AMOUNT $NORMAL"
#     g log --pretty=oneline -$AMOUNT
# }
#

#!/bin/bash
# by http://github.com/jehiah
# this prints out some branch status (similar to the '... ahead' info you get from git status)

# example:
# $ git branch-status
# dns_check (ahead 1) | (behind 112) origin/master
# master (ahead 2) | (behind 0) origin/master

branchss(){
    git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads | \
    while read local remote
    do
        [ -z "$remote" ] && continue
        git rev-list --left-right ${local}...${remote} -- 2>/dev/null >/tmp/git_upstream_status_delta || continue
        LEFT_AHEAD=$(grep -c '^<' /tmp/git_upstream_status_delta)
        RIGHT_AHEAD=$(grep -c '^>' /tmp/git_upstream_status_delta)
        echo "$local (ahead $LEFT_AHEAD) | (behind $RIGHT_AHEAD) $remote"
    done
}
